"""A BioSimSpace base Node for running BioSimSpace simulations."""

# pylint: disable=import-outside-toplevel, import-error
from pathlib import Path
from typing import Any

import pytest

from maize.core.interface import Input, Output
from maize.core.node import Node
from maize.utilities.testing import TestRig

__all__ = []


class _BioSimSpaceBase(Node):
    """
    Base node for all BioSimSpace nodes.

    Notes
    -----
    Install with `mamba create -f env.yaml`.

    References
    ----------
    L. O. Hedges et al., JOSS, 2019, 4, 1831.
    L. O. Hedges et al., LiveCoMS, 2023, 5, 2375â€“2375.
    """

    required_packages = ["BioSimSpace"]

    # Input
    inp: Input[Path | list[Path]] = Input()
    """
    Path(s) to system input files. These can be in any of the formats
    given by BSS.IO.fileFormats():
    
    gro87, grotop, mol2, pdb, pdbx, prm7, rst rst7, psf, sdf
    """

    # Output
    out: Output[list[Path]] = Output(mode="copy")
    """The output files generated by BioSimSpace, in gromacs format."""

    def run(self) -> None:
        """A dummy run function for use in testing."""
        # If this is not being run by the base class directly, raise a not implemented error
        if type(self) is not _BioSimSpaceBase:
            raise NotImplementedError(
                "Classes inheriting from _BioSimSpaceBase must implement their own `run()` method."
            )

        sys = self._load_input()
        self._save_output(sys)

    def _load_input(self) -> "BioSimSpace._SireWrappers.System":
        """Load the input files. This should only be called within `run()`."""

        import BioSimSpace as BSS

        input_files = self.inp.receive()

        # Convert to strings for BSS
        input_files = (
            [str(f) for f in input_files] if isinstance(input_files, list) else str(input_files)
        )

        return BSS.IO.readMolecules(input_files)

    def _save_output(self, system: "BioSimSpace._SireWrappers.System") -> None:
        """Save the output files. This should only be called within `run()`."""
        import BioSimSpace as BSS

        self.out.send(
            [Path(f) for f in BSS.IO.saveMolecules("bss_system", system, ["gro87", "grotop"])]
        )


class _DummyBioSimSpaceNode(_BioSimSpaceBase): ...


@pytest.fixture
def complex_prm7_path(shared_datadir: Any) -> Any:
    return shared_datadir / "complex.prm7"


@pytest.fixture
def complex_rst7_path(shared_datadir: Any) -> Any:
    return shared_datadir / "complex.rst7"


class TestSuiteBioSimSpaceBase:
    def test_biosimspace_base_multi_input(
        self,
        temp_working_dir: Any,
        complex_prm7_path: Any,
        complex_rst7_path: Any,
    ) -> None:
        """Test the BioSimSpace base node with two input files."""
        rig = TestRig(_BioSimSpaceBase)
        res = rig.setup_run(inputs={"inp": [[complex_prm7_path, complex_rst7_path]]})
        output = res["out"].get()
        # Get the file name from the path
        file_names = {f.name for f in output}
        assert file_names == {"bss_system.gro", "bss_system.top"}

    def test_dummy_biosimspace_node(
        self,
        temp_working_dir: Any,
        complex_prm7_path: Any,
        complex_rst7_path: Any,
    ) -> None:
        """Test the BioSimSpace base node with two input files."""
        rig = TestRig(_DummyBioSimSpaceNode)
        with pytest.raises(NotImplementedError):
            rig.setup_run(inputs={"inp": [[complex_prm7_path, complex_rst7_path]]})
