"""BioSimSpace system preparation subgraphs and workflows."""

from abc import ABC
from functools import wraps
from pathlib import Path
from typing import Annotated, Callable, Literal

from maize.core.graph import Graph
from maize.core.interface import FileParameter, Flag, Input, Output, Parameter, Suffix
from maize.core.workflow import Workflow, expose
from maize.steps.exs.biosimspace import (
    Combine,
    EquilibrateGromacs,
    LegType,
    MinimiseGromacs,
    Parameterise,
    Solvate,
)
from maize.steps.io import Return, Void

__all__ = [
    "SystemPreparationFree",
    "SystemPreparationBound",
    "system_prep_free",
    "system_prep_bound",
]


class _SystemPreparationBase(Graph, ABC):
    """
    A base subgraph for BioSimSpace system preparation,
    given a single ligand isomer with or without a protein.
    This involves:

    - Parameterisation
    - Solvation
    - Minimisation
    - Equilibration

    The class variable leg_type should be set to the type of leg
    required in the subclass.
    """

    # Class variables
    leg_type: LegType
    """
    The type of leg - either LegType.FREE for the unbound ligand,
    or LegType.BOUND for the complex.
    """

    # Input
    inp: Input[Path] = Input(optional=True)
    """The path to the ligand sdf file."""

    # Output
    out: Output[tuple[Path, Path]] = Output(optional=True)
    """The output files for the system generated by BioSimSpace, in gromacs format."""

    # Parameters
    ligand_force_field: Parameter[
        Literal["gaff", "gaff2", "openff_unconstrained-1.0.0", "openff_unconstrained-2.0.0"]
    ] = Parameter(default="gaff2")
    """The force field to use for the ligand."""

    water_model: Parameter[Literal["spc", "spce", "tip3p", "tip4p"]] = Parameter(default="tip3p")
    """The water model to use for solvation."""

    minimisation_steps: Parameter[int] = Parameter(default=1000)
    """The maximum number of minimisation steps to perform."""

    temperature: Parameter[float] = Parameter(default=300.0)
    """The temperature to heat to and equilibrate at, in k"""

    runtime_heating: Parameter[float] = Parameter(default=0.005)
    """The runtime for NVT heating, in ns"""

    runtime_restrained_nvt: Parameter[float] = Parameter(default=0.05)
    """The runtime for restrained NVT equilibration, in ns"""

    runtime_unrestrained_nvt: Parameter[float] = Parameter(default=0.05)
    """The runtime for unrestrained NVT equilibration, in ns"""

    runtime_unrestrained_npt: Parameter[float] = Parameter(default=1.0)
    """The runtime for NPT equilibration without restraints, in ns"""

    save_name: FileParameter[Path] = FileParameter(default="bss_system")

    def build(self) -> None:
        param_lig = self.add(Parameterise, name="ParameteriseLigand")
        if self.leg_type == LegType.BOUND:
            param_prot = self.add(Parameterise, name="ParameteriseProtein")
            # param_wat = (
            #     self.add(Parameterise, name="ParameteriseWater") if self.water_pdb.is_set else None
            # )
        combine_systems = self.add(Combine, name="CombineSystems")
        solvate = self.add(Solvate, name="Solvate")
        minimise = self.add(MinimiseGromacs, name="Minimise")
        heat = self.add(EquilibrateGromacs, name="Heat")
        nvt_restrained = self.add(EquilibrateGromacs, name="NVT_Restrained")
        nvt_unrestrained = self.add(EquilibrateGromacs, name="NVT_Unrestrained")
        if self.leg_type == LegType.BOUND:
            npt_restrained = self.add(EquilibrateGromacs, name="NPT_Restrained")
        npt_unrestrained = self.add(EquilibrateGromacs, name="NPT_Unrestrained")

        # Set the parameters
        map_to_temperature = [
            heat.temperature_end,
            nvt_restrained.temperature_start,
            nvt_restrained.temperature_end,
            nvt_unrestrained.temperature_start,
            nvt_unrestrained.temperature_end,
        ]
        self.combine_parameters(param_lig.force_field, name="ligand_force_field")
        # param_lig.force_field.set(self.ligand_force_field.value)
        if self.leg_type == LegType.BOUND:
            self.combine_parameters(param_prot.force_field, name="protein_force_field")
            self.combine_parameters(param_prot.inp, name="protein_pdb")
        # Set a random force field for the water - the water model is what matters
        # if param_wat:
        #     param_wat.force_field.set("ff14SB")
        # self.combine_parameters(param_wat.water_model, name="water_model")
        self.combine_parameters(solvate.water_model, name="water_model")
        self.combine_parameters(minimise.steps, name="minimisation_steps")
        heat.temperature_start.set(0.0)
        self.combine_parameters(heat.runtime, name="runtime_heating")
        self.combine_parameters(nvt_restrained.runtime, name="runtime_restrained_nvt")
        self.combine_parameters(nvt_unrestrained.runtime, name="runtime_unrestrained_nvt")
        if self.leg_type == LegType.BOUND:
            map_to_temperature.extend(
                [npt_restrained.temperature_start, npt_restrained.temperature_end]
            )
            self.combine_parameters(npt_restrained.runtime, name="runtime_restrained_npt")
        self.combine_parameters(npt_unrestrained.runtime, name="runtime_unrestrained_npt")

        self.combine_parameters(*map_to_temperature, name="temperature")

        # Connect the nodes. Note that we can only currently connect the nodes 6 at a time
        self.connect(param_lig.out, combine_systems.inp)
        if self.leg_type == LegType.BOUND:
            self.connect(param_prot.out, combine_systems.inp)
        # if param_wat:
        #     self.connect(param_wat.out, combine_systems.inp)
        # Set an ipython debugger

        self.connect_all(
            (combine_systems.out, solvate.inp),
            (solvate.out, minimise.inp),
            (minimise.out, heat.inp),
            (heat.out, nvt_restrained.inp),
            (nvt_restrained.out, nvt_unrestrained.inp),
        )

        if self.leg_type == LegType.BOUND:
            self.connect_all(
                (nvt_unrestrained.out, npt_restrained.inp),
                (npt_restrained.out, npt_unrestrained.inp),
            )
        else:
            self.connect(nvt_unrestrained.out, npt_unrestrained.inp)

        # Combine save name parameters
        self.combine_parameters(*[n.save_name for n in self.nodes.values()], name="save_name")

        # Map the inputs and outputs
        self.inp = self.map_port(param_lig.inp)
        self.out = self.map_port(npt_unrestrained.out)


class SystemPreparationFree(_SystemPreparationBase):
    """
    A subgraph for BioSimSpace system preparation of a free ligand.
    This involves:

    - Parameterisation
    - Solvation
    - Minimisation
    - Equilibration
    """

    leg_type = LegType.FREE


class SystemPreparationBound(_SystemPreparationBase):
    """
    A subgraph for BioSimSpace system preparation of a bound ligand.
    This involves:

    - Parameterisation
    - Solvation
    - Minimisation
    - Equilibration
    """

    leg_type = LegType.BOUND

    # Parameters
    protein_pdb: Parameter[Path] = Parameter(optional=True)
    """The path to the protein pdb file."""

    runtime_restrained_npt: Parameter[float] = Parameter(default=0.4)
    """
    The runtime for NPT equilibration with restrained protein, in ns. This
    step is skipped if no protein is supplied.
    """

    protein_force_field: Parameter[Literal["ff99", "ff99SB", "ff99SBildn", "ff14SB"]] = Parameter(
        default="ff14SB"
    )
    """The force field to use for the protein."""


def _create_sys_prep_workflow_fn(leg_type: LegType) -> Callable[[], Workflow]:
    """
    Create a function returning a system preparation workflow for either the
    free ligand, or a bound complex.
    """

    def sys_prep_workflow_fn() -> Workflow:

        flow = Workflow(name=f"system_preparation_{leg_type.leg_name}", cleanup_temp=False)

        sys_prep_class = (
            SystemPreparationFree if leg_type == LegType.FREE else SystemPreparationBound
        )
        system_preparation = flow.add(sys_prep_class, name=sys_prep_class.__name__)
        retu = flow.add(Return[tuple[Path, Path]], name="Return")

        flow.connect(system_preparation.out, retu.inp)

        flow.map(system_preparation.inp)
        flow.map(*system_preparation.parameters.values())

        return flow

    # Programattically add docstrings
    sys_prep_workflow_fn.__doc__ = f"""
    A workflow for BioSimSpace system preparation of a {leg_type.leg_name} ligand.
    This involves:

    - Parameterisation
    - Solvation
    - Minimisation
    - Equilibration
    """

    return sys_prep_workflow_fn


# Create leg-specific workflows with CLI
system_prep_free = _create_sys_prep_workflow_fn(LegType.FREE)
system_prep_bound = _create_sys_prep_workflow_fn(LegType.BOUND)
system_prep_free_exposed = expose(system_prep_free)
system_prep_bound_exposed = expose(system_prep_bound)
